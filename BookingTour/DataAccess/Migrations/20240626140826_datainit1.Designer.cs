// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(TourBookingContext))]
    [Migration("20240626140826_datainit1")]
    partial class datainit1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entites.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7728),
                            Status = "Confirmed",
                            TourId = 1,
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7729),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7731),
                            Status = "Pending",
                            TourId = 2,
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7731),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7733),
                            Status = "Confirmed",
                            TourId = 3,
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7733),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.CategoryTour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreaateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CategoryTours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreaateBy = 0,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7884),
                            ModifyBy = 0,
                            Name = "Adventure Tours",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7889)
                        },
                        new
                        {
                            Id = 2,
                            CreaateBy = 0,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7892),
                            ModifyBy = 0,
                            Name = "Cultural Tours",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7893)
                        },
                        new
                        {
                            Id = 3,
                            CreaateBy = 0,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7894),
                            ModifyBy = 0,
                            Name = "Beach Vacations",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7895)
                        },
                        new
                        {
                            Id = 4,
                            CreaateBy = 0,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7896),
                            ModifyBy = 0,
                            Name = "City Breaks",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7897)
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalRoom")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1 Champs-Élysées, Paris",
                            CreateBy = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7817),
                            Description = "5-star hotel in the heart of Paris",
                            ModifyBy = 0,
                            Name = "Luxury Paris Hotel",
                            Status = "Open",
                            TotalRoom = 200,
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7818)
                        },
                        new
                        {
                            Id = 2,
                            Address = "1-1-1 Shibuya, Tokyo",
                            CreateBy = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7820),
                            Description = "Modern hotel with a view of Tokyo skyline",
                            ModifyBy = 0,
                            Name = "Tokyo Skyline Hotel",
                            Status = "Open",
                            TotalRoom = 300,
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7821)
                        },
                        new
                        {
                            Id = 3,
                            Address = "5th Avenue, New York",
                            CreateBy = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7822),
                            Description = "Iconic New York hotel",
                            ModifyBy = 0,
                            Name = "New York Plaza",
                            Status = "Open",
                            TotalRoom = 400,
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7823)
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.HotelImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            Url = "https://example.com/paris_hotel.jpg"
                        },
                        new
                        {
                            Id = 2,
                            HotelId = 2,
                            Url = "https://example.com/tokyo_hotel.jpg"
                        },
                        new
                        {
                            Id = 3,
                            HotelId = 3,
                            Url = "https://example.com/nyc"
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Paris, France",
                            CreateBy = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7510),
                            Description = "City of Love",
                            ModifyBy = 0,
                            Name = "Paris",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7513)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tokyo, Japan",
                            CreateBy = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7516),
                            Description = "Vibrant Metropolis",
                            ModifyBy = 0,
                            Name = "Tokyo",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7517)
                        },
                        new
                        {
                            Id = 3,
                            Address = "New York, USA",
                            CreateBy = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7518),
                            Description = "The Big Apple",
                            ModifyBy = 0,
                            Name = "New York",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7519)
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<DateTime>("ExpriedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DataAccess.Entites.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalBill")
                        .HasColumnType("float");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("DataAccess.Entites.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryTourId")
                        .HasColumnType("int");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryTourId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("HotelId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryTourId = 1,
                            CreateBy = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7560),
                            Description = "Explore the iconic Eiffel Tower",
                            HotelId = 1,
                            ModifyBy = 0,
                            Name = "Eiffel Tower Adventure",
                            Price = 100.0,
                            StartDay = new DateTime(2024, 7, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7563),
                            Status = "Available",
                            TotalDay = "1",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7562)
                        },
                        new
                        {
                            Id = 2,
                            CategoryTourId = 2,
                            CreateBy = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7572),
                            Description = "Taste the best sushi in Tokyo",
                            HotelId = 2,
                            ModifyBy = 0,
                            Name = "Tokyo Sushi Experience",
                            Price = 150.0,
                            StartDay = new DateTime(2024, 8, 10, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7574),
                            Status = "Available",
                            TotalDay = "2",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7573)
                        },
                        new
                        {
                            Id = 3,
                            CategoryTourId = 3,
                            CreateBy = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7577),
                            Description = "Enjoy a Broadway musical in New York",
                            HotelId = 3,
                            ModifyBy = 0,
                            Name = "NYC Broadway Show",
                            Price = 200.0,
                            StartDay = new DateTime(2024, 8, 25, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7578),
                            Status = "Available",
                            TotalDay = "3",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7578)
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.TourDetail", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableSlot")
                        .HasColumnType("int");

                    b.Property<string>("DepartureLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerPerson")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.Property<string>("Transportation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TourId");

                    b.ToTable("TourDetails");
                });

            modelBuilder.Entity("DataAccess.Entites.TourGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TourGuides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 0,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7768),
                            Email = "john@example.com",
                            Fullname = "John Doe",
                            ModifyBy = 0,
                            Phone = "1112223333",
                            Status = "Available",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7769)
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 0,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7772),
                            Email = "jane@example.com",
                            Fullname = "Jane Smith",
                            ModifyBy = 0,
                            Phone = "4445556666",
                            Status = "Available",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7773)
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 0,
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7774),
                            Email = "mike@example.com",
                            Fullname = "Mike Johnson",
                            ModifyBy = 0,
                            Phone = "7778889999",
                            Status = "Busy",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7775)
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.TourImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TourId = 1,
                            Url = "https://example.com/eiffel.jpg"
                        },
                        new
                        {
                            Id = 2,
                            TourId = 2,
                            Url = "https://example.com/sushi.jpg"
                        },
                        new
                        {
                            Id = 3,
                            TourId = 3,
                            Url = "https://example.com/broadway.jpg"
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.TourLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationId = 1,
                            Status = "ACTIVE",
                            TourId = 1
                        },
                        new
                        {
                            Id = 2,
                            LocationId = 2,
                            Status = "ACTIVE",
                            TourId = 2
                        },
                        new
                        {
                            Id = 3,
                            LocationId = 3,
                            Status = "ACTIVE",
                            TourId = 3
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Admin St",
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(6988),
                            DoB = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            Fullname = "Admin User",
                            Password = "admin123",
                            Phone = "1234567890",
                            Role = "Admin",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7001),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 User Ave",
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7009),
                            DoB = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            Fullname = "Regular User",
                            Password = "user123",
                            Phone = "9876543210",
                            Role = "User",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7010),
                            Username = "user1"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Guide Rd",
                            CreatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7013),
                            DoB = new DateTime(1988, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "guide1@example.com",
                            Fullname = "Tour Guide",
                            Password = "guide123",
                            Phone = "5555555555",
                            Role = "Guide",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 6, 26, 21, 8, 24, 488, DateTimeKind.Local).AddTicks(7014),
                            Username = "guide1"
                        });
                });

            modelBuilder.Entity("DataAccess.Entites.Booking", b =>
                {
                    b.HasOne("DataAccess.Entites.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entites.Hotel", b =>
                {
                    b.HasOne("DataAccess.Entites.User", "Admin")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DataAccess.Entites.HotelImage", b =>
                {
                    b.HasOne("DataAccess.Entites.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("DataAccess.Entites.Location", b =>
                {
                    b.HasOne("DataAccess.Entites.User", "Admin")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DataAccess.Entites.RefreshToken", b =>
                {
                    b.HasOne("DataAccess.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entites.Ticket", b =>
                {
                    b.HasOne("DataAccess.Entites.Tour", "Tour")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entites.Ticket", "TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccess.Entites.User", "User")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entites.Ticket", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entites.Tour", b =>
                {
                    b.HasOne("DataAccess.Entites.CategoryTour", "CategoryTour")
                        .WithMany()
                        .HasForeignKey("CategoryTourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entites.User", "Admin")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccess.Entites.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("CategoryTour");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("DataAccess.Entites.TourDetail", b =>
                {
                    b.HasOne("DataAccess.Entites.Tour", "Tour")
                        .WithOne("TourDetail")
                        .HasForeignKey("DataAccess.Entites.TourDetail", "TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entites.TourGuide", b =>
                {
                    b.HasOne("DataAccess.Entites.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DataAccess.Entites.TourImage", b =>
                {
                    b.HasOne("DataAccess.Entites.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entites.TourLocation", b =>
                {
                    b.HasOne("DataAccess.Entites.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccess.Entites.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entites.Tour", b =>
                {
                    b.Navigation("TourDetail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
